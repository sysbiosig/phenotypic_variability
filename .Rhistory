ld[l,] = c(mean.log, sd.log)
ldlist[[k]]=ld
}
}
} else {
return("wrong distribution type, either gamma or lognormal possible")
}
if(n.sampled >= 1){
doses <- log10(c(0.001, 0.1, 1, 10))
capacities <- c()
for(k in 1:length(percentiles)){
if(continuous == "FALSE"){
capacities = c(capacities,
get.single.percentile.capacity(
distribution.parameters = ldlist[[k]],
n.sampled =
n.sampled,
distribution.type =
distribution.type)
)
} else if(continuous == "TRUE"){
rvec <- unlist(D)[seq(k, length(percentiles) * length(doses), by = length(percentiles))]
capacities <- c(capacities,
get.single.percentile.capacity.cont(
xvec = doses,
rvec = rvec,
sd.coefficient2 = sd.coefficient^2,
distribution.type = distribution.type)
)
} else {return("wrong continuous value, should be T/F")}
}
capacity <- log2(mean(2^capacities))
} else {
return("Too low sample number!")
}
return(capacity)
}
sd.AB <- function(A, B){
# function to calculate sd from two df.columns,
# representing signal in the nucleus A and B
if(length(A) != length(B)){
break()
}
sd <- c()
for(i in 1:length(A)){
mean <- (A[i] + B[i])/2
sd[i] <- (((A[i]-mean)^2 + (B[i]-mean)^2)/2)^0.5
}
return(sd)
}
#### data loading ####
bio.AB <- read.csv(paste(input.path,
"/fused_paper.csv", sep = ""), header = TRUE, sep = ",")
merge.chosen <- "no"
bio.AB <- bio.AB %>%
dplyr::filter(merged_nuclei == merge.chosen &
((stim_type == "IFNG" &
time == 15) |
(stim_type == "OSM" &
time == 30)))
bio.traj <- read.csv(paste(input.path,
"/trajectories_paper.csv", sep = ""), header = TRUE, sep = ",")
bio.traj <- bio.traj %>%
dplyr::filter(nuclearity == "single-nuclear")
#### choosing the stimulants ####
bio.coefficients <- bio.AB %>%
group_by(stim_type)%>%
mutate(sd = sd.AB(A, B),
mean = (A + B)/2) %>%
summarise(a = summary(lm(sd ~ 0 + mean))$coefficients[[1]]) %>%
ungroup()
set.seed(12)
all.capacity <- data.frame()
chosen.stimulants <- unique(bio.traj$stim_type)
for(stim.type.chosen in chosen.stimulants){
if(stim.type.chosen == "IFNG"){
time.chosen <- 15
} else if(stim.type.chosen == "OSM") {
time.chosen <- 30
}
sd.coefficient <- as.numeric(bio.coefficients %>%
dplyr::filter(stim_type == stim.type.chosen) %>%
select(a))
bio.for.capacity <- bio.traj %>%
dplyr::filter(time == time.chosen &
stim_type == stim.type.chosen)
stimulant.gamma.capacity.c <-
get.all.percentile.capacity(data = bio.for.capacity,
sd.coefficient = sd.coefficient,
percentiles = seq(0.05, 0.95, by = 0.01),
continuous = TRUE,
distribution.type = "gamma")
stimulant.log.capacity.c <-
get.all.percentile.capacity(data = bio.for.capacity,
sd.coefficient = sd.coefficient,
percentiles = seq(0.05, 0.95, by = 0.01),
continuous = TRUE,
distribution.type = "lognormal")
all.capacity <- rbind(all.capacity,
data.frame(stim_type = stim.type.chosen,
gamma.capacity.cont = stimulant.gamma.capacity.c,
lognormal.capacity.cont = stimulant.log.capacity.c))
}
print(all.capacity)
2^2.37
2^2.77
getwd()
#### set-up of directories ####
# either provide a path to main directory, or open "phenotypic_variability" Rproject
base.path <- getwd()
input.path <- paste(base.path, "/data", sep = "")
#### loading libraries and functions ####
source(paste(base.path, "/Topolewski_auxiliary_functions.R", sep = ""))
#### data loading ####
bio.AB <- read.csv(paste(input.path,
"/fused_paper.csv", sep = ""),
header = TRUE, sep = ",")
# A script for reproducing the Figure 2
#### set-up of directories ####
# either provide a path to the main directory,
# or open the "phenotypic_variability" Rproject
base.path <- getwd()
input.path <- paste(base.path, "/data", sep = "")
#### loading libraries and functions ####
source(paste(base.path, "/Topolewski_auxiliary_functions.R", sep = ""))
# all code noted as "aux code" is first introduced in the above auxiliary file
#### data loading ####
merge.chosen <- "no"
bio.AB <- read.csv(paste(input.path,
"/fused_paper.csv", sep = ""),
header = TRUE, sep = ",")
#### plotting Figure 2 ####
chosen.stimulants.AB <- c("IFNG", "OSM")
plots <- list()
set.seed(12)
for(stim.type.chosen in chosen.stimulants.AB){
if(stim.type.chosen == "IFNG"){
limits <- c(0, 60)
x.text <- limits[1] + (limits[2] - limits[1])/30
y.text <- limits[1] + (limits[2] - limits[1])*5/6
breaks <- seq(limits[1], limits[2]-1, 20)
my.pal <- IFN.pal # aux code
time.chosen <- 15
ggtitle <- bquote("IFN-"*gamma ~ .(time.chosen)~"min")
} else if(stim.type.chosen == "OSM") {
limits <- c(0, 40)
x.text <- limits[1] + (limits[2] - limits[1])/30
y.text <- limits[1] + (limits[2] - limits[1])*5/6
breaks <- seq(limits[1], limits[2]-1, 15)
my.pal <- OSM.pal # aux code
time.chosen <- 30
ggtitle <- bquote("OSM" ~ .(time.chosen)~"ng/mL")
}
bio.plot <- bio.AB %>%
dplyr::filter(merged_nuclei == merge.chosen &
stim_type == stim.type.chosen &
time == time.chosen)
decom.fold <- noise.decompose.boot(data = bio.plot,
n = 1,
boot.no = 1000,
estimator = "sd",
colname.A = "A",
colname.B = "B",
group.columns = c("stim_level",
"time")) # aux code
alpha <- 1
size <- 1.5
shape <- 16
plots[[paste(stim.type.chosen, "_scatter", sep = "")]] <- ggplot()+
geom_point(data = bio.plot,
aes(x = A,
y = B,
color = factor(stim_level),
shape = replicate),
alpha = alpha,
size = size)+
geom_text(data = decom.fold,
parse = TRUE,
x = x.text,
y = y.text,
aes(label = paste("atop(''* rho[italic(phen.)] * ''== ", Icv,
",''* rho[italic(noise)] * ''*''== ", Ncv, ")",
sep = "")),
hjust = 0,
size = 4)+
geom_text(data = decom.fold,
parse = TRUE,
x = x.text+limits[2]*0.45,
y = y.text,
aes(label = paste("phantom(0)%+-%", sd_Ncv, sep = "")),
hjust = 0,
size = 3.25)+
geom_abline(slope = 1, linetype = 2, color = "grey40")+
theme_trajectories(aspect.ratio = 1)+
theme(axis.text=element_text(size=6),
legend.position = "bottom")+
facet_grid(.~stim_level)+
scale_color_manual(values = my.pal,
guide = "none")+
scale_x_continuous(expand = c(0, 0),
breaks = breaks,
limits = limits,
name = "nucleus A response [a.u.]")+
scale_shape_manual(values = c(16, 6),
guide = NULL)+
scale_y_continuous(expand = c(0, 0),
breaks = breaks,
limits = limits,
name = "nucleus B response [a.u.]")
plots[[paste(stim.type.chosen, "_scatter", sep = "")]]
}
arranged.plots <- arrangeGrob(grobs = plots, layout_matrix = rbind(c(1, 1, 1),
c(2, 2, 2)))
width <- 7.5
height <- 7
filename_suffix <- "Figure_22.pdf"
path.to.save <- paste(base.path, "/figures", sep = "")
push.dir(path.to.save) # aux code
cairo_pdf(paste(path.to.save, "/",
filename_suffix, sep = ""),
width = width, height = height)
grid.arrange(arranged.plots)
dev.off()
# A script for reproducing the Figure 3
#### set-up of directories ####
# either provide a path to the main directory,
# or open the "phenotypic_variability" Rproject
base.path <- getwd()
input.path <- paste(base.path, "/data", sep = "")
#### loading libraries and functions ####
source(paste(base.path, "/Topolewski_auxiliary_functions.R", sep = ""))
# all code noted as "aux code" is first introduced in the above auxiliary file
#### data loading ####
bio.traj <- read.csv(paste(input.path,
"/trajectories_paper.csv", sep = ""),
header = TRUE, sep = ",")
bio.traj <- bio.traj %>%
dplyr::filter(nuclearity == "single-nuclear")
merge.chosen <- "no"
bio.AB <- read.csv(paste(input.path,
"/fused_paper.csv", sep = ""),
header = TRUE, sep = ",")
#### Plotting the Figure 3 ####
sd.coefficients <- list()
chosen.stimulants.AB <- c("IFNG", "OSM")
plots <- list()
font.chosen <- "sans" #
set.seed(12)
for(stim.type.chosen in chosen.stimulants.AB){
if(stim.type.chosen == "IFNG"){
x.limits <- c(0, 60)
y.limits <- c(0, 60)*0.5
x.text <- x.limits[1] + (x.limits[2] - x.limits[1])/10
y.text <- y.limits[1] + (y.limits[2] - y.limits[1])*4/6
x.breaks <- seq(x.limits[1], x.limits[2]-1, 20)
y.breaks <- seq(y.limits[1], y.limits[2]-1, 20)
my.pal <- IFN.pal # aux code
time.chosen <- 15
ggtitle <- bquote("IFN-"*gamma ~ .(time.chosen)~"min")
} else if(stim.type.chosen == "OSM") {
x.limits <- c(0, 40)
y.limits <- c(0, 40)*0.5
x.text <- x.limits[1] + (x.limits[2] - x.limits[1])/10
y.text <- y.limits[1] + (y.limits[2] - y.limits[1])*4/6
x.breaks <- seq(x.limits[1], x.limits[2]-1, 15)
y.breaks <- seq(y.limits[1], y.limits[2]-1, 15)
my.pal <- OSM.pal # aux code
time.chosen <- 30
ggtitle <- bquote("OSM" ~ .(time.chosen)~"ng/mL")
}
bio.sd <- bio.AB %>%
dplyr::filter(merged_nuclei == merge.chosen,
stim_type == stim.type.chosen &
time == time.chosen) %>%
mutate(sd = sd.AB(A, B), # aux code
mean = (A + B)/2)
bio.lm <- bio.sd %>%
summarise(a = summary(lm(sd ~ 0 + mean))$coefficients[[1]],
sd_err = summary(lm(sd ~ 0 + mean))$coefficients[[2]])
sd.coefficients[[stim.type.chosen]] <- bio.lm$a
bio.plot <- bio.sd
alpha <- 1
size <- 1.5
shape <- 16
plots[[paste(stim.type.chosen, "_sd", sep = "")]] <- ggplot()+
geom_point(data = bio.plot,
aes(x = mean,
y = sd,
color = factor(stim_level)),
alpha = alpha,
size = size,
shape = shape)+
geom_text(data = bio.lm,
parse = TRUE,
x = x.text,
y = y.text,
aes(label = paste("atop(''* sigma[italic(noise)]^(i) * ''%~~% ",
round(a, 3),  " ~~ italic(bar(y)[i]))",
sep = "")),
hjust = 0,
size = 4,
family=font.chosen)+
geom_text(data = bio.lm,
parse = TRUE,
x = x.text + x.limits[2]*0.25,
y = y.text - y.limits[2]*0.04,
aes(label = paste("phantom(0)%+-%", round(sd_err, 4), sep = "")),
hjust = 0,
size = 2.5,
family=font.chosen)+
geom_abline(data = bio.lm, aes(slope = a, intercept = 0),
linetype = 1,
color = "grey70",
size = 0.75)+
theme_trajectories(aspect.ratio = 1)+
theme(axis.title.y = element_text(family = font.chosen,
margin = margin(0,-5,0,0), size = 12),
axis.title.x = element_text(family = font.chosen))+
scale_color_manual(values = my.pal,
guide = "none")+
scale_x_continuous(expand = c(0, 0),
breaks = x.breaks,
limits = x.limits,
name = expression(italic(bar(y)[i])))+
scale_y_continuous(expand = c(0, 0),
breaks = y.breaks,
limits = y.limits,
name = expression(sigma[italic(noise)]^(i)))
}
#### percentile responses ####
i = 1
chosen.stimulants.trajectory <- c("IFNG", "OSM")
for(stim.type.chosen in chosen.stimulants.trajectory){
if(stim.type.chosen == "IFNG"){
y.limits <- c(0, 17)
my.pal <- IFN.pal # aux code
time.chosen <- 15
x.text <- 0.4
y.text <- 0.85
y.breaks <- seq(x.limits[1], x.limits[2], 6)
x.breaks <- seq(y.limits[1], y.limits[2], 0.5)
ggtitle <- bquote("IFN-"*gamma ~ .(time.chosen)~"min")
} else if(stim.type.chosen == "OSM") {
y.limits <- c(0, 25)
my.pal <- OSM.pal # aux code
time.chosen <- 30
x.text <- 0.4
y.text <- 0.85
y.breaks <- seq(x.limits[1], x.limits[2], 10)
x.breaks <- seq(y.limits[1], y.limits[2], 0.6)
ggtitle <- bquote("OSM" ~ .(time.chosen)~"min")
}
bio.percentile <- bio.traj %>%
dplyr::filter(time == time.chosen,
stim_type == stim.type.chosen) %>%
group_by(stim_level)%>%
summarise(th5 = quantile(x = response, probs = 0.05),
th50 = quantile(x = response, probs = 0.5),
th95 = quantile(x = response, probs = 0.95)) %>%
melt(id.vars = c("stim_level"),
value.name = "response",
variable.name = "percentile")
legend.size <- 8
plots[[paste(stim.type.chosen, "_percentile", sep = "")]] <-
ggplot(data = bio.percentile,
aes(y = response,
x = factor(stim_level)))+
geom_line(aes(group = percentile),
color = "black",
lwd = 0.5)+
geom_point(aes(shape = percentile,
fill = factor(stim_level)),
size = 3)+
scale_fill_manual(values = my.pal,
name = "dose [ng/mL]",
guide = "none")+
scale_shape_manual(values = c(24, 23, 21),
limits = c("th95", "th50", "th5"),
name = "percentile",
labels = c("95% (strong response)",
"50% (moderate response)",
"5% (weak response)"))+
theme_trajectories(aspect.ratio = 1,
border.thickness = 0.4)+ # aux code
theme(legend.position = c(x.text, y.text),
legend.text = element_text(size = legend.size),
legend.title = element_text(size = legend.size+2),
legend.background = element_blank(),
legend.key.size = unit(3, "mm"))+
coord_cartesian(ylim = y.limits)+
scale_x_discrete(expand = c(0.05, 0),
name = "dose [ng/mL]")+
scale_y_continuous(expand = c(0.05, 0),
breaks = y.breaks,
name = "relative fluorescence intensity")+
guides(shape = guide_legend(override.aes = list(size=2)))
i = i + 1
}
i=1
for(stim.type.chosen in chosen.stimulants.trajectory){
if(stim.type.chosen == "IFNG"){
my.pal <- IFN.pal # aux code
time.chosen <- 15
paste("dose", stim.type.chosen, " [ng/mL]")
xtitle <- bquote("IFN-"*gamma ~ "dose [ng/mL]")
} else if(stim.type.chosen == "OSM") {
my.pal <- OSM.pal # aux code
time.chosen <- 30
xtitle <- bquote("OSM dose [ng/mL]")
}
sd.coefficient <- sd.coefficients[[stim.type.chosen]]
bio.CM <- confusion.matrix.gamma(data = bio.traj,
stim_type_chosen = stim.type.chosen,
time.chosen = time.chosen,
sd.coefficient = sd.coefficient,
percentiles = seq(0.05, 0.95, by = 0.01))
# aux code
if(0 %in% bio.CM$prob){
bio.CM[bio.CM$prob == 0, ]$prob <- NA
}
plots[[paste(stim.type.chosen, "CM")]] <- ggplot(bio.CM,
aes(fill = factor(push.stim),
x = 1,
y = prob))+
geom_bar(stat = "identity",
color = "black") +
facet_grid(stim~push.stim, switch = "y")+
coord_polar(theta = "y", start = 0) +
scale_y_continuous(breaks = NULL,
position = "right",
limits = c(0, 1),
name = "dose for which response is typical [ng/mL]")+
scale_x_continuous(breaks = NULL,
name = xtitle)+
geom_vline(xintercept = 1.45,
colour = "black") +
scale_fill_manual(values = my.pal,
guide = "none")+
theme_trajectories(axis.name.size = 8)+
theme(panel.border = element_blank(),
panel.spacing.x=unit(0, "mm"),
panel.spacing.y=unit(0, "mm"),
plot.caption = element_text(size = 20,
hjust = 0.5))
i = i + 1
}
arranged.plots <- arrangeGrob(grobs = plots, layout_matrix = rbind(c(1, 2),
c(3, 4),
c(5, 6)))
width <- 5.25
height <- 8
filename.suffix <- "Figure_33.pdf"
path.to.save <- paste(base.path, "/figures", sep = "")
push.dir(path.to.save)
cairo_pdf(paste(path.to.save, "/",
filename.suffix, sep = ""),
width = width, height = height)
grid.arrange(arranged.plots)
dev.off()
# A script for reproducing the Figure S4
#### set-up of directories ####
# either provide a path to the main directory,
# or open the "phenotypic_variability" Rproject
base.path <- getwd()
input.path <- paste(base.path, "/data", sep = "")
#### loading libraries and functions ####
source(paste(base.path, "/Topolewski_auxiliary_functions.R", sep = ""))
# all code noted as "aux code" is first introduced in the above auxiliary file
#### data loading ####
bio.AB <- read.csv(paste(input.path,
"/fused_paper.csv", sep = ""),
header = TRUE, sep = ",")
#### plotting the Figure S4 ####
ratio.limits <- c(0, 4)
differ.factor <- 0.5
bio.plot <- bio.AB
alpha <- 1
size <- 0.5
plots <- list()
plots[["mixing"]] <- ggplot()+
geom_point(data = bio.plot,
aes(y = (ratio_dye_B),
x = (ratio_dye_A),
color = factor(merged_nuclei)),
alpha = alpha,
size = size)+
theme_trajectories(axis.num.size = 8,
aspect.ratio = 1)+ # aux. code
theme(axis.title=element_text(size=8, face = "plain"))+
scale_color_manual(values = c("lightgoldenrod2",
"mediumorchid4"),
name = "merged nuclei")+
geom_abline(slope = 1, intercept = -differ.factor,
linetype = 2, color = "grey40")+
geom_abline(slope = 1, intercept = differ.factor,
linetype = 2, color = "grey40")+
scale_x_continuous(breaks = c(differ.factor, 1, seq(0, 4, 2)),
limits = ratio.limits, expand = c(0, 0),
name = bquote(frac("nucleus#1", "nucleus#2") ~
"inter-nuclear ratio of Dye A"))+
scale_y_continuous(breaks = c(differ.factor, 1, seq(0, 4, 2)),
limits = ratio.limits, expand = c(0, 0),
name = bquote(frac("nucleus#1", "nucleus#2") ~
"inter-nuclear ratio of Dye B"))+
guides(color = guide_legend(override.aes = list(size=8)))
plots[["mixing"]]
path.to.save <- paste(base.path, "/figures/", sep = "")
push.dir(path.to.save)
pdf(file = paste(path.to.save, "/Figure_S44.pdf", sep = ""),
width = 4, height = 3)
plots
dev.off()
